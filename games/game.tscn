[gd_scene load_steps=9 format=2]

[ext_resource path="res://fonts/Workbench-Regular.ttf" type="DynamicFontData" id=1]
[ext_resource path="res://agent.tscn" type="PackedScene" id=3]
[ext_resource path="res://fonts/Jura-Light.ttf" type="DynamicFontData" id=4]

[sub_resource type="GDScript" id=13]
script/source = "extends Node2D

# const TIME =
export(int, 200) var time
export(int, 400) var population_stream
export(PackedScene) var Agent
export(int, 10) var unpaused_time_scale = 3
export(float, 10.0) var mut_std_dev = 2.0
export(int, 400) var initial_population = 20

# onready var timer = get_node(\"Timer\")
onready var pause_message = get_node(\"UI/Pause\")
onready var agents_node = get_node(\"Agents\")

var population
var number_of_agents
var agents_alive = []
var is_game_paused := false
var input_names = []
var output_names = []
var sorted_agents = []
var is_loading_mode_enabled := false
var finished_agent


func _process(_delta):
  if Input.is_action_just_pressed(\"pause\"):
    pause()


func _physics_process(_delta):
  sorted_agents = get_active_agents()
  sorted_agents.sort_custom(AgentSorter, \"sort_by_fitness_ascenting\")


func init_population():
  var starting_gen = 0
  if population != null:
    starting_gen = population.generation
  if !is_loading_mode_enabled:
    population = Population.new([], input_names, output_names,
        starting_gen, initial_population)
  else:
    population = Population.new([], input_names, output_names,
        starting_gen, initial_population, true)
  number_of_agents = population.population_stream
  if !is_loading_mode_enabled:
    generate_agent_population(initial_population)
  else:
    generate_from_save()


func save(genome_dict, name):
  var save_game = File.new()
  save_game.open(\"user://{name}.save\".format({\"name\": name}), File.WRITE)
  save_game.store_line(to_json(genome_dict))
  save_game.close()


func load_agent(name) -> Dictionary:
  var saved_agent = File.new()
  var filepath = \"user://{name}.save\".format({\"name\": name})
  assert(saved_agent.file_exists(filepath))
  saved_agent.open(filepath, File.READ)
  var saved_agent_dict = parse_json(saved_agent.get_line())
  saved_agent.close()
  return saved_agent_dict


func restart_population():
  agents_alive = get_tree().get_nodes_in_group(\"agents\")
  for agent in agents_alive:
    decrement_agent_population()
    # agent.queue_free()
    agent.kill_agent()
  population.genomes = []
  population = Population.new([], input_names, output_names,
      0, initial_population)
  if is_loading_mode_enabled:
    generate_from_save()
  else:
    number_of_agents = population.population_stream
    generate_agent_population(initial_population)
  restart_population_specific()
  # timer.start(0.1)


func get_active_agents():
  var all_agents =  get_tree().get_nodes_in_group(\"agents\")
  var active_agents := []
  for agent in all_agents:
    if !agent.is_queued_for_deletion() && !agent.is_dead:
      active_agents.append(agent)
  return active_agents


func generate_agent_population(agent_pop = population_stream):
  pass

func decrement_agent_population(num: int = 1) -> void:
  pass

func increment_agent_population(num: int = 1) -> void:
  pass

func change_generation():
  pass

func restart_population_specific():
  pass

func generate_from_save():
  pass


func pause():
  if !is_game_paused:
    Engine.time_scale = 0.0
    is_game_paused = true
    pause_message.visible = true
  else:
    Engine.time_scale = unpaused_time_scale
    is_game_paused = false
    pause_message.visible = false


func is_paused():
  return is_game_paused


func set_time_scale(value):
  if !is_game_paused:
    unpaused_time_scale = value
    Engine.time_scale = value


func _on_Quit_pressed():
  get_tree().quit(0)


func _on_Resume_pressed():
  pause()


func _on_Restart_pressed():
  restart_population()
  pause()


func _on_MainMenu_pressed():
  pause()
  var err = get_tree().change_scene(\"res://menu/main-menu/main-menu.tscn\")
  if err != OK:
    print(\"Cannot change scene\")


func _on_Save_Best_Agent_pressed():
  # var best_agent = sorted_agents[-1]
  # save(best_agent.genome.to_dict(), \"testsave\")
  save(finished_agent.genome.to_dict(), \"testsave\")



class AgentSorter:
  static func sort_by_dist_ascenting(a, b):
    if a[1] < b[1]:
      return true
    return false

  static func sort_by_fitness_ascenting(a, b):
    if a.get_fitness() < b.get_fitness():
      return true
    return false

"

[sub_resource type="StyleBoxFlat" id=9]
bg_color = Color( 0.184314, 0.0745098, 0.0745098, 0.168627 )

[sub_resource type="DynamicFont" id=10]
size = 40
use_filter = true
font_data = ExtResource( 1 )

[sub_resource type="DynamicFont" id=11]
size = 20
use_filter = true
font_data = ExtResource( 1 )

[sub_resource type="DynamicFont" id=12]
size = 60
use_filter = true
font_data = ExtResource( 4 )

[node name="Game" type="Node2D" groups=["level"]]
position = Vector2( -1, 100 )
script = SubResource( 13 )
Agent = ExtResource( 3 )

[node name="Agents" type="Node2D" parent="."]

[node name="UI" type="Control" parent="."]
margin_right = 40.0
margin_bottom = 40.0

[node name="Pause" type="Control" parent="UI"]
visible = false
margin_right = 40.0
margin_bottom = 40.0

[node name="PausePanel" type="Panel" parent="UI/Pause"]
margin_left = 2.0
margin_top = -100.0
margin_right = 1922.0
margin_bottom = 980.0
custom_styles/panel = SubResource( 9 )

[node name="VBoxContainer" type="VBoxContainer" parent="UI/Pause"]
margin_left = 805.0
margin_top = 329.0
margin_right = 1176.0
margin_bottom = 515.0
custom_constants/separation = 9

[node name="PauseMessage" type="Label" parent="UI/Pause/VBoxContainer"]
margin_right = 371.0
margin_bottom = 40.0
theme_type_variation = "Title"
custom_colors/font_color = Color( 0.564706, 0.658824, 0.219608, 1 )
custom_fonts/font = SubResource( 10 )
text = "Pause"
align = 1
valign = 1

[node name="PressSpace" type="Label" parent="UI/Pause/VBoxContainer"]
margin_top = 49.0
margin_right = 371.0
margin_bottom = 70.0
custom_colors/font_color = Color( 0.564706, 0.658824, 0.219608, 1 )
custom_fonts/font = SubResource( 11 )
text = "Press space to start"
align = 1
valign = 1

[node name="Resume" type="Button" parent="UI/Pause/VBoxContainer"]
margin_top = 79.0
margin_right = 371.0
margin_bottom = 99.0
text = "Resume"

[node name="MainMenu" type="Button" parent="UI/Pause/VBoxContainer"]
margin_top = 108.0
margin_right = 371.0
margin_bottom = 128.0
text = "Main Menu"

[node name="Restart" type="Button" parent="UI/Pause/VBoxContainer"]
margin_top = 137.0
margin_right = 371.0
margin_bottom = 157.0
text = "Restart"

[node name="SaveBestAgent" type="Button" parent="UI/Pause/VBoxContainer"]
margin_top = 166.0
margin_right = 371.0
margin_bottom = 186.0
custom_colors/font_color_disabled = Color( 0.129412, 0.0392157, 0.0392157, 1 )
disabled = true
text = "Save Best Agent"

[node name="Quit" type="Button" parent="UI/Pause/VBoxContainer"]
margin_top = 195.0
margin_right = 371.0
margin_bottom = 215.0
text = "Quit"

[node name="Solved" type="Control" parent="UI"]
margin_right = 40.0
margin_bottom = 40.0

[node name="SolvedText" type="Label" parent="UI/Solved"]
visible = false
margin_left = 902.0
margin_top = -46.0
margin_right = 1067.0
margin_bottom = 23.0
custom_fonts/font = SubResource( 12 )
text = "Solved"

[connection signal="pressed" from="UI/Pause/VBoxContainer/Resume" to="." method="_on_Resume_pressed"]
[connection signal="pressed" from="UI/Pause/VBoxContainer/MainMenu" to="." method="_on_MainMenu_pressed"]
[connection signal="pressed" from="UI/Pause/VBoxContainer/Restart" to="." method="_on_Restart_pressed"]
[connection signal="pressed" from="UI/Pause/VBoxContainer/SaveBestAgent" to="." method="_on_Save_Best_Agent_pressed"]
[connection signal="pressed" from="UI/Pause/VBoxContainer/Quit" to="." method="_on_Quit_pressed"]
